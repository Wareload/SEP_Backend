openapi: 3.0.3
info:
  title: SEP Backend
  description: Backend of SEP Group Bugs Bunnies of University of Mannheim
  version: 1.0.0
  contact:
    name: Bugs Bunnies
    url: https://bugsbunnies.de/
    email: bugsbunnies@gmx.de
servers:
  - url: 'http://localhost:3000'
    description: Local Test Server
  - url: 'https://api.bugsbunnies.de:443'
    description: Remote Test Server
paths:
  /account/register:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      description: Register
      tags:
        - Account
      responses:
        200:
          description: Successful Register
        400:
          description: Bad Request
        409:
          description: Conflict, Email already taken
        500:
          description: Server Error
  /account/login:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      description: Login
      tags:
        - Account
      responses:
        200:
          description: Successful Login
        400:
          description: Bad Request
        401:
          description: Login failed
        500:
          description: Server Error
  /account/isLoggedIn:
    post:
      description: Is Logged In
      tags:
        - Account
      responses:
        200:
          description: User is logged in
        401:
          description: User is n ot logged in
        500:
          description: Server Error
  /account/logout:
    post:
      description: Logout
      tags:
        - Account
      responses:
        200:
          description: Successful Logout
        500:
          description: Server Error
  /profile/adjustProfile:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      description: Adjust Profile
      tags:
        - Profile
      responses:
        200:
          description: Successful Adjust Profile
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /profile/getProfile:
    post:
      description: Get Profile
      tags:
        - Profile
      responses:
        200:
          description: Successful Get Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileInfo'
        401:
          description: Unauthorized
        500:
          description: Server Error
  /mood/getTimer:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      description: Get Timer
      tags:
        - Mood
      responses:
        200:
          description: Successful Get Timer
        401:
          description: Unauthorized
        409:
          description: Timer is on cooldown
        500:
          description: Server Error
  /mood/setMood:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetMood'
      description: Set Mood
      tags:
        - Mood
      responses:
        200:
          description: Successful Set Mood
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden, Invalid Team
        409:
          description: Mood already set for current day
        500:
          description: Server Error
  /mood/getPersonalMood:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResGetMood'
      description: Get Personal Mood
      tags:
        - Mood
      responses:
        200:
          description: Successful Get Personal Mood
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /mood/getTeamMood:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResGetMood'
      description: Get Team Mood
      tags:
        - Mood
      responses:
        200:
          description: Successful Get Team Mood
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/createTeam:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamName'
      description: Create a new Team
      tags:
        - Team
      responses:
        200:
          description: Successful Create a new Team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfo'
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/deleteTeam:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamId'
      description: Delete a new Team
      tags:
        - Team
      responses:
        200:
          description: Successful Delete a Team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/getTeams:
    post:
      description: Get all Teams of logged in user
      tags:
        - Team
      responses:
        200:
          description: Successful get all Teams
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/getTeam:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamId'
      description: Get Team by id
      tags:
        - Team
      responses:
        200:
          description: Successful get a team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/removeTeamMember:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMember'
      description: Get Team by id
      tags:
        - Team
      responses:
        200:
          description: Successful Delete a Team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict, Team member doesn't exist
        500:
          description: Server Error
  /team/leaveTeam:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamId'
      description: Leave Team by id
      tags:
        - Team
      responses:
        200:
          description: Successful left Team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        409:
          description: Conflict, can't leave team
        500:
          description: Server Error
  /team/getInvitations:
    post:
      description: Get all team invitations
      tags:
        - Team
      responses:
        200:
          description: Successful got all invitations
        401:
          description: Unauthorized
        500:
          description: Server Error
  /team/promoteTeamLeader:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMember'
      description: Promote other team member to team leader and demote self
      tags:
        - Team
      responses:
        200:
          description: Successful got all invitations
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict
        500:
          description: Server Error
  /team/addTeamMember:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTeamMember'
      description: Add team member to team
      tags:
        - Team
      responses:
        200:
          description: Successful add team member to team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict, already got an invitation
        410:
          description: Conflict, team does not exist
        500:
          description: Server Error
  /team/acceptInvitation:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamId'
      description: Accept invitation
      tags:
        - Team
      responses:
        200:
          description: Successful add team member to team
        400:
          description: Bad Request
        401:
          description: Unauthorized
        409:
          description: Conflict, already got an invitation
        500:
          description: Server Error
  /team/declineInvitation:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamId'
      description: Decline invitation
      tags:
        - Team
      responses:
        200:
          description: Successful add team member to team
        400:
          description: Bad Request
        409:
          description: Conflict, no invitation to remove
        500:
          description: Server Error
  /notification/getAlert:
    post:
      description: Get notification info
      tags:
        - Notification
      responses:
        200:
          description: Successful get notification info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationInfo'
        401:
          description: Unauthorized
        500:
          description: Server Error
security:
  - cookieAuth: [ ]
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: bugsbunnies.sid
  schemas:
    Login:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "test@test.test"
        password:
          type: string
          example: "TestTest123"
    Register:
      required:
        - email
        - password
        - firstname
        - lastname
      properties:
        email:
          type: string
          example: "test@test.test"
        password:
          type: string
          example: "TestTest123"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
    Timer:
      required:
        - teamid
      properties:
        teamid:
          type: number
          example: 5
    SetMood:
      required:
        - teamid
        - mood
      properties:
        teamid:
          type: number
          example: 5
        mood:
          type: number
          example: 2
        note:
          type: string
          example: Today is a good day
    GetMood:
      required:
        - teamid
        - startDate
        - endDate
      properties:
        teamid:
          type: number
          example: 5
        startDate:
          type: string
          example: 2022-06-12
        endDate:
          type: string
          example: 2022-06-12
    Profile:
      required:
        - tags
        - firstname
        - lastname
      properties:
        tags:
          type: array
          example: [ "Java", "C++", "Lisp" ]
          items:
            type: string
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
    TeamName:
      required:
        - teamname
      properties:
        teamname:
          type: string
          example: "Bugs Bunnies"
    TeamId:
      required:
        - teamid
      properties:
        teamid:
          type: number
          example: 5
    TeamMember:
      required:
        - teamid
        - userId
      properties:
        teamid:
          type: number
          example: 5
        userId:
          type: number
          example: 21
    AddTeamMember:
      required:
        - userEmail
        - teamId
      properties:
        userEmail:
          type: string
          example: test@test.test
        teamId:
          type: number
          example: 5
    ProfileInfo:
      properties:
        email:
          type: string
          example: test@test.net
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        tags:
          type: array
          example: [ "Java", "C++", "Lisp" ]
          items:
            type: string
    ResGetMood:
      properties:
        mood:
          type: array
          example: [ { mood: 2, note: "Good day", date: 2022-05-05 },{ mood: 0, note: "Bad day", date: 2022.05.06 } ]
          items:
            type: object
    TeamInfo:
      properties:
        teamid:
          type: number
          example: 19
        teamname:
          type: string
          example: "Bugs Bunnies"
    NotificationInfo:
      properties:
        moods:
          type: array
          example: [ { "teamid": 36,"avg": 3,"min": 3 },{ "teamid": 66,"avg": 3,"min": 3 } ]

